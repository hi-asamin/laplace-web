---
description: FRACTAL ダッシュボード UI 向けデザインガイドライン
globs: *.tsx
alwaysApply: false
---
# Laplaceデザインガイドライン

*適用範囲: Web (Next.js + Tailwind CSS)*

---

## 1. ブランド & トーン

### ブランドキーワード
- **Core Values**: *Trustable・Intuitive・Future-Focused*
- **Visual Keywords**: *Clean・Professional・Approachable*
- **UX Philosophy**: 初心者でも迷わず使える直感的なUI、即時フィードバック

### Voice & Tone
- 平易な日本語 + 金融用語の英語併記
- マイクロコピーは簡潔明瞭（18字以内）
- 行動を促すポジティブな表現を重視

---

## 2. カラーパレット

### メインカラー
```css
/* LP専用カラートークン */
--color-lp-navy: #0a2540     /* メインテキスト、見出し */
--color-lp-mint: #00d4a1     /* アクセント、CTA、ハイライト */
--color-lp-blue: #4a90e2     /* サブアクセント、セカンダリ要素 */
--color-lp-off-white: #f5f7fa /* セクション背景 */

/* 共通カラートークン */
--color-primary: #00d4a1     /* システム全体の基本アクセント */
--color-success: #00d4a1     /* 成功状態、上昇値 */
--color-danger: #dc2626      /* エラー状態、下落値 */
--color-surface: #ffffff     /* カード背景 */
--color-surface-alt: #f7fafc /* ページ背景 */
```

### カラー使用ルール
- **メインCTA**: `--color-lp-mint`（ミントグリーン）で統一
- **見出し・重要テキスト**: `--color-lp-navy`（ネイビー）
- **アクセント・補助色**: `--color-lp-blue`（ブルー）
- **背景グラデーション**: `from-[var(--color-lp-mint)]/5 to-[var(--color-lp-blue)]/5`

---

## 3. タイポグラフィ

### フォントファミリー
```css
--font-poppins: var(--font-poppins)        /* 英語見出し */
--font-noto-sans-jp: var(--font-noto-sans-jp) /* 日本語本文 */
```

### テキストスケール
| スタイル | サイズ | 使用場面 | クラス例 |
|---------|--------|----------|----------|
| **Hero Title** | `text-5xl md:text-7xl` | ランディングページメイン見出し | `font-bold text-[var(--color-lp-navy)]` |
| **Section Title** | `text-4xl md:text-5xl` | セクション見出し | `font-bold text-[var(--color-lp-navy)]` |
| **Sub Title** | `text-2xl md:text-3xl` | サブセクション見出し | `font-bold text-[var(--color-lp-navy)]` |
| **Body Large** | `text-xl` | リード文、重要な説明 | `text-slate-600` |
| **Body** | `text-lg` | 標準本文 | `text-slate-600` |
| **Caption** | `text-sm` | 注釈、サポートテキスト | `text-slate-500` |

---

## 4. レイアウト & グリッド

### コンテナ設計
```css
/* 最大幅とセンタリング */
max-w-7xl mx-auto px-4 sm:px-6 lg:px-8

/* セクション間隔 */
py-20  /* 標準セクション間隔 */
py-12  /* 小セクション間隔 */

/* 要素間隔 */
mb-16  /* セクション内大見出し下 */
mb-12  /* セクション内中見出し下 */
mb-6   /* 一般的な要素間 */
```

### レスポンシブグリッド
```css
/* 2カラムレイアウト */
grid-cols-1 lg:grid-cols-2 gap-8

/* 3カラムレイアウト */
grid-cols-1 md:grid-cols-3 gap-8

/* 特徴セクション（左右交互） */
lg:flex-row-reverse  /* 奇数インデックスで反転 */
```

---

## 5. コンポーネントスタイル

### ボタン

#### Primary Button (CTA)
```css
bg-[var(--color-lp-mint)] text-white 
px-8 py-4 rounded-full text-lg font-semibold 
hover:bg-[var(--color-lp-mint)]/90 
transition-all hover:scale-105 
shadow-xl
```

#### Secondary Button (ナビゲーション)
```css
bg-[var(--color-lp-mint)] text-white 
px-6 py-2 rounded-full 
hover:bg-[var(--color-lp-mint)]/90 
transition-all hover:scale-105
```

#### Chip Button (インタラクティブタグ)
```css
bg-white border-2 border-[var(--color-lp-mint)]/20 
hover:border-[var(--color-lp-mint)] 
hover:bg-[var(--color-lp-mint)]/5 
px-4 py-2 rounded-full 
transition-all duration-200 
hover:scale-105 hover:shadow-lg
```

### カード

#### 標準情報カード
```css
bg-white rounded-2xl p-8 shadow-lg 
hover:shadow-xl transition-all duration-300 
hover:scale-105
```

#### 大型コンテンツカード
```css
bg-white rounded-3xl p-8 shadow-xl 
border border-slate-200
```

#### アクセントカード（選択状態）
```css
border-[var(--color-lp-mint)] 
bg-[var(--color-lp-mint)]/5 
scale-105
```

### 入力フィールド

#### 検索ボックス
```css
w-full px-6 py-4 text-lg border-2 rounded-full 
transition-all duration-300
border-[var(--color-lp-mint)] 
bg-[var(--color-lp-mint)]/5 
outline-none shadow-lg
```

### ナビゲーション

#### 固定ナビゲーション
```css
fixed top-0 left-0 right-0 z-50 
bg-white/90 backdrop-blur-md 
border-b border-slate-200
h-16
```

---

## 6. アイコン & イラスト

### アイコン仕様
- **ライブラリ**: `lucide-react`
- **デフォルトサイズ**: `w-5 h-5` (20px)
- **大きいアイコン**: `w-8 h-8` (32px)
- **装飾アイコン**: `w-16 h-16` (64px)

### アイコン使用例
```jsx
// CTA内アイコン
<Play className="w-5 h-5" />

// 機能説明アイコン
<feature.icon className="w-8 h-8 text-[var(--color-lp-mint)]" />

// 装飾背景アイコン
<TrendingDown className="w-16 h-16 text-red-500" />
```

---

## 7. アニメーション & インタラクション

### アニメーション期間
```css
/* 基本トランジション */
transition-all duration-300

/* ホバーエフェクト */
transition-all duration-200

/* 長いアニメーション */
transition-all duration-1000

/* 特殊エフェクト */
duration-3000  /* スケールアニメーション */
```

### インタラクションパターン
```css
/* ホバー時拡大 */
hover:scale-105

/* ホバー時シャドウ */
hover:shadow-xl

/* アクティブ時透明度変更 */
hover:bg-[var(--color-lp-mint)]/90

/* フェードイン */
opacity-100 translate-y-0
opacity-0 translate-y-10
```

### カスタムキーフレーム
```css
@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

@keyframes bar-grow {
  from { transform: scaleY(0); }
  to { transform: scaleY(1); }
}
```

---

## 8. セクション構造パターン

### セクション共通構造
```jsx
<section className="py-20 [背景クラス]">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div className="text-center mb-16">
      <h2 className="text-4xl md:text-5xl font-bold text-[var(--color-lp-navy)] mb-6 font-[var(--font-poppins)]">
        セクションタイトル
      </h2>
      <p className="text-xl text-slate-600 max-w-2xl mx-auto">
        セクション説明文
      </p>
    </div>
    {/* コンテンツ */}
  </div>
</section>
```

### 背景バリエーション
```css
/* 標準背景 */
[なし - 白背景]

/* 軽いアクセント */
bg-[var(--color-lp-off-white)]

/* グラデーション（アクセント） */
bg-gradient-to-br from-[var(--color-lp-mint)]/5 to-[var(--color-lp-blue)]/5

/* グラデーション（強調） */
bg-gradient-to-br from-[var(--color-lp-navy)] to-[var(--color-lp-blue)] text-white

/* グラデーション（CTA） */
bg-gradient-to-br from-[var(--color-lp-mint)] to-[var(--color-lp-blue)] text-white
```

---

## 9. 装飾要素

### 背景装飾
```css
/* ソフトブラー円 */
w-32 h-32 bg-[var(--color-lp-mint)]/5 rounded-full blur-xl

/* 波紋効果 */
border-2 border-red-300 rounded-full animate-ping opacity-30
```

### グラデーション使用パターン
```css
/* ハイライト用 */
bg-gradient-to-br from-[var(--color-lp-mint)]/10 to-[var(--color-lp-blue)]/10

/* ボーダー強調 */
border border-[var(--color-lp-mint)]/20

/* インライン強調 */
bg-gradient-to-r from-[var(--color-lp-mint)] to-[var(--color-lp-blue)]
```

---

## 10. レスポンシブ対応

### ブレークポイント
```css
sm: 640px   /* スマートフォン（大） */
md: 768px   /* タブレット */
lg: 1024px  /* デスクトップ（小） */
xl: 1280px  /* デスクトップ（大） */
2xl: 1536px /* デスクトップ（特大） */
```

### レスポンシブパターン
```css
/* テキストサイズ */
text-4xl md:text-5xl
text-xl md:text-2xl

/* グリッド */
grid-cols-1 lg:grid-cols-2
grid-cols-1 md:grid-cols-3

/* スペーシング */
px-4 sm:px-6 lg:px-8
gap-4 lg:gap-12

/* フレックス */
flex-col sm:flex-row
```

---

## 11. 実装時のベストプラクティス

### CSS変数の使用
```jsx
// ✅ 推奨: CSS変数を使用
className="text-[var(--color-lp-navy)]"
className="bg-[var(--color-lp-mint)]"

// ❌ 非推奨: ハードコーディング
className="text-blue-900"
className="bg-green-400"
```

### アニメーション実装
```jsx
// Intersection Observer を使用したスクロールトリガー
const [isVisible, setIsVisible] = useState(false);
const ref = useRef<HTMLDivElement>(null);

useEffect(() => {
  const observer = new IntersectionObserver(
    ([entry]) => {
      if (entry.isIntersecting) {
        setIsVisible(true);
      }
    },
    { threshold: 0.3 }
  );
  
  if (ref.current) {
    observer.observe(ref.current);
  }
  
  return () => observer.disconnect();
}, []);
```

### コンポーネント分割
```jsx
// ✅ 推奨: 再利用可能なコンポーネント
const AnimatedNumber = ({ end, duration, prefix, suffix }) => {
  // アニメーションロジック
};

// ✅ 推奨: セクションごとのコンポーネント
const OneClickExperienceSection = () => {
  // セクション固有のロジック
};
```