---
description: 
globs: 
---
---
title: "Laplace — Tech Stack"
description: プロダクトの技術スタック
globs: *
alwaysApply: true
---

# Technology Stack Documentation

## Frontend Framework
- **Next.js (TypeScript)**
  - Server-side rendering capabilities
  - Built-in API routes
  - TypeScript for type safety
  - App Router

## UI Components & Styling
- **React.js**
  - Component-based architecture
  - Efficient rendering with virtual DOM
- **Shade/cn**
  - Consistent styling system
  - Rapid UI development
- **Framer Motion / GSAP**
  - Advanced animations
  - Smooth transitions
- **Three.js**
  - 3D rendering capabilities
  - Interactive visual elements
- **Google Fonts & Iconify**
  - Typography management
  - Scalable icon system

## Backend & Data Storage
- **Supabase**
  - PostgreSQL database
  - Real-time capabilities
  - Built-in authentication
  - Row-level security
- **Next.js API Routes**
  - Server-side logic
  - API endpoint management
  - Integration handling

## Authentication & Security
- **Supabase Auth**
  - JWT-based sessions
  - OAuth providers
  - Role-based access control
- **Security Features**
  - CORS configuration
  - API rate limiting
  - Input validation

## AI Integration
- **OpenAI**
  - LLM for productivity insights
  - Premium tier feature
  - Async processing

## Payment Processing
- **Stripe**
  - Subscription management
  - Payment processing
  - Customer portal
  - Webhook handling

## Development Tools
- **Version Control**
  - Git
  - GitHub for collaboration
- **Code Quality**
  - ESLint
  - Prettier
  - TypeScript strict mode
- **Testing**
  - Jest
  - React Testing Library
  - Cypress for E2E

## Deployment & Infrastructure
- **Vercel**
  - Production hosting
  - CI/CD pipeline
  - Edge functions
  - Analytics

## Progressive Web App
- **Service Workers**
  - Offline functionality
  - Background sync
- **Web App Manifest**
  - Mobile installation
  - App-like experience

## External Integrations
- **Calendar APIs**
  - Google Calendar
  - Microsoft Outlook
- **Web Push API**
  - Push notifications
  - Service worker integration

## Architecture Decisions

### State Management
- React Context for global state
- Local component state where possible
- Supabase real-time subscriptions

### Performance Optimization
- Code splitting
- Image optimization
- Lazy loading
- Cache strategies

### Scalability Considerations
- Serverless architecture
- Edge computing capabilities
- Database indexing
- Connection pooling

## Development Principles
1. Type safety first
2. Component reusability
3. Performance optimization
4. Accessibility compliance
5. Progressive enhancement